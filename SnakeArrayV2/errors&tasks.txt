Заемчания:
1. Оформление кода
1.1. Неверно оформлены комментарии. Больше информации http://msdn.microsoft.com/ru-ru/library/b2s063f7.aspx
Вместо 
	/// Класс для хранения и обработки массива.
Надо писать 		
	/// <summary>
        /// Класс для хранения и обработки массива.
	/// </summary>
1.2. Опять открывающая фигурная скобка на той же строке что и оператор. В студии можно выставить стили оформления кода. Возможно у Вас стоит не стиль по умолчанию для C#.
Вместо
	static void Main() {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new FormView());
        }
надо писать 
	static void Main() 
	{
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new FormView());
        }

1.3. Класс Pointer. Функция public void DoMagic() может кинуть исключение MissingMemberException("Enum do not contains such element"); Необходимо написать об это в комментарии к функции используя теги <exception>
1.4. Все объекты интерфейса должны иметь имена соответствующие их функциональной нагрузке 
вместо 
	button3
	private void button3_Click(object sender, EventArgs e)
надо писать 
	buttonSelectFile
	private void buttonSelectFile_Click(object sender, EventArgs e)


2.1. Необходимо разделить логику хранения настроек и сериализации/десериализации настроек в объекте Settings. Класс Settings должен быть помечен атрибутом [Serializable], свойства должны быть помечены аттрибутом [XmlElement]
2.2. Сохранять и загружать настройки необходимо в объекте Program в функции Main(). 
2.3. Необходимо обеспечить доступ к настройкам из любого объекта приложения. Для этого лучше всего подойдет паттерн проектирования Singleton (http://ru.wikipedia.org/wiki/Singleton)
2.4. Для склеивания пути есть стандартная функция System.IO.Path.Combine()
Вместо 
	Application.CommonAppDataPath  + @"\app.config"
надо писать 
	System.IO.Path.Combine(Application.CommonAppDataPath, "app.config")
2.5. Непонятно зачем нужен флаг _appSettingsChanged. Если это флаг для изменения свойств настроек, то он работает некорректно, так как только один раз имеет состояние false.
Логика необходимости сохранения настроек в файл должна быть вынесена за контект сомого объекта Settings.
2.6. Проверка на корректность ввода имени файла должна быть такой 
вместо 
	if (textBox1.Text.Length < 1)
надо писать 
	if (string.IsNullOrEmpty(textBox1.Text))
2.7. Необходимо убрать отладочную кнопку "Сохранить". Надо стараться избегать загромождения интерфейса. Логику сохранения в файл необходимо внести на кнопку "Построить".
2.8. Необходимо переработать объект DataGridViewPrinter. Удалить функцию GetMainForm(). Удалить MyDataGrid из FormView. Использовать паттерн проектирования Dependency injection (DI) (подробнее http://ru.wikipedia.org/wiki/%C2%ED%E5%E4%F0%E5%ED%E8%E5_%E7%E0%E2%E8%F1%E8%EC%EE%F1%F2%E8 ). Для этого сделать публичное свойство в объекте DataGridViewPrinter типа DataGridView. Логику инициализации вынести на уровень выше в контекст FormView, который использует объект DataGridViewPrinter.
2.9. Аналогично(2.8) для объекта FilePrinter сделать свойство путь к файлу в качестве общедоступного свойства и инициализировать его перед вызовом функции Print.
2.10. Не исправлено замечание 4 про использование GetUpperBound. Необходимо избавится от использования этой функции. Для этого лучше всего реализовать свой объект описывающий двумерный массив со свойствами N и M.

Задания
1. Реализовать лог работы программы с использованием библиотеки логирования NLog (http://nlog-project.org/)
1.1. Лог программы хранить в той же дирректории, что и настройки
1.2. Внести в лог все действия пользователя, включая начало работы программы и выход из программы, ошибочные действия пользователя и т.д.
2. Переработать код программы в соответствии с паттерном Model-View-Presenter (MVP) (подробнее http://habrahabr.ru/post/211899/ )